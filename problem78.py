"""
0
1 - 1
-------------------
00
0 0
2 - 2
--------------------
000
00 0
0 0 0
3 - 3
--------------------
0000
000 0
00 00
00 0 0
0 0 0 0
4 - 5
--------------------
00000
0000 0
000 00
000 0 0
00 00 0
00 0 0 0
0 0 0 0 0
5 - 7
--------------------
000000
00000 0
0000 00
0000 0 0
000 000
000 00 0
000 0 0 0
00 00 00
00 00 0 0
00 0 0 0 0
0 0 0 0 0 0
6 - 11
--------------------
0000000
000000 0
00000 00
00000 0 0
0000 000
0000 00 0
0000 0 0 0
000 000 0
000 00 00
000 00 0 0
000 0 0 0 0
00 00 00 0
00 00 0 0 0
00 0 0 0 0 0
0 0 0 0 0 0 0
7 - 13
--------------------
00000000
0000000 0
000000 00
000000 0 0
00000 000
00000 00 0
00000 0 0 0
0000 0000
0000 000 0
0000 00 00
0000 00 0 0
0000 0 0 0 0
000 000 00
000 000 0 0
000 00 00 0
000 00 0 0 0
000 0 0 0 0 0
00 00 00 00
00 00 00 0 0
00 00 0 0 0 0
00 0 0 0 0 0 0
0 0 0 0 0 0 0 0
8 - 22
--------------------
000000000
00000000 0
0000000 00
000000 000
00000 0000
0000000 0 0
000000 00 0
00000 000 0
00000 00 00
0000 0000 0
0000 000 00
000 000 000
000000 0 0 0
00000 00 0 0
0000 000 0 0
0000 00 00 0
000 000 00 0
000 00 00 00
00000 0 0 0 0
0000 00 0 0 0
000 000 0 0 0
000 00 00 0 0
00 00 00 00 0
0000 0 0 0 0 0
000 00 0 0 0 0
00 00 00 0 0 0
000 0 0 0 0 0 0
00 00 0 0 0 0 0
00 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
9 - 30
--------------------
0000000000
000000000 0
00000000 00
0000000 000
000000 0000
00000 00000
00000000 0 0
0000000 00 0
000000 000 0
000000 00 00
00000 0000 0
00000 000 00
0000 0000 00
0000 000 000
0000000 0 0 0
000000 00 0 0
00000 000 0 0
00000 00 00 0
0000 0000 0 0
0000 000 00 0
0000 00 00 00
000 000 000 0
000 000 00 00
000000 0 0 0 0
00000 00 0 0 0
0000 000 0 0 0
0000 00 00 0 0
000 000 00 0 0
000 00 00 00 0
00 00 00 00 00
00000 0 0 0 0 0
0000 00 0 0 0 0
000 000 0 0 0 0
000 00 00 0 0 0
00 00 00 00 0 0
0000 0 0 0 0 0 0
000 00 0 0 0 0 0
00 00 00 0 0 0 0
000 0 0 0 0 0 0 0
00 00 0 0 0 0 0 0
00 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
10 - 42
--------------------
"""

ways_cache = dict()


def count_ways(n, m=0, prefix=''):
    """
    :param n: - coins to separate
    :param m: - max coins in one partitions
    :param prefix:
    :return:
    """
    if n < 2:
        return 1
    w = 0
    max_k = min(n, m) if m else n
    if max_k < 2:
        return 1
    if n in ways_cache:
        if max_k in ways_cache[n]:
            # print(prefix + 'get cache for', n, max_k, '=', ways_cache[n][max_k])
            return ways_cache[n][max_k]
    else:
        ways_cache[n] = dict()
    # print(prefix + 'max_k', m, n, max_k)
    for k in range(1, max_k + 1):
        w += count_ways(n - k, k, prefix + ' > ')
    # print(prefix + 'ways for', n, '<=', m, '=', w)
    ways_cache[n][max_k] = w % 10000000
    return w % 10000000


if __name__ == '__main__':
    for coins in range(1, 10000):
        ways = count_ways(coins)
        print("\033[F\033[K", coins, ways)
        if not ways % 10 ** 4:
            print("\033[F\033[K", coins, ways, "\n")
    print(ways_cache)
